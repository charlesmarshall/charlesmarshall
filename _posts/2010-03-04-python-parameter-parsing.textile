---
layout: default
title: Python Parameter Parsing to Array
category: general
keywords:
- work
- general
- python
- GET
- POST
- REQUEST
- parameters
- automation
- orgainisation
- array
- structure
description: "As I'm new to Python I might have this totally wrong, but Python doesn't seem to have a nice way to convert the GET/POST request data in to an array. This is a pain, so I wrote a class to handle it..."
introduction: "<p>As I'm new to Python (I've started to use Google App Engine for a project) I might have this totally wrong, but Python doesn't seem to have a nice way to convert the GET/POST request data in to an array.</p><p>As I'm from a PHP background, this is a real pain, so I wrote a class to handle it...</p>"
---

As I've been working on a project on Google App Engine, using Python, I've needed to grab data from the post or get request data. 

I'm coming from a mostly PHP scripting background, so I might be missing something, but I will go over what I think is happening...

h2. Raw Tools in App Engine

So you can get hold of simple data easily enough, you can query the request object thats attached to self, like this:

<pre>
class Home(webapp.RequestHandler):
  def get(self):
    self.response.get('x')
</pre>

For most cases, that works. However, I have a cases that don't... The main one being multi-dimensional arrays as get data. My query string looks a bit like this:

<pre>
?names[0][firstname]=foo&names[0][surname]=bar&names[1][firstname]=first&names[1][surname]=last
</pre>

With PHP you would simply do @$names = $_REQUEST['names']@ and PHP works out the array for you. Not so in Python. Calling @self.request.get('names')@ returns an error, saying that index doesn't exist. 

Python does have other helpers which are more useful, like @self.request.GET.items()@, that lets you loop over the entire GET data set, and if you enumerate it you get key value pairs:

<pre>
for key,value in enumerate(self.request.GET.items()):
  print key
  print value
  
</pre>

Success, or so you'd think... However, the key is not very useful, it comes out as the full thing. So, the first key is @ [0][firstname] @ which is about as useful as a chocolate tea pot when I'm trying to make a multi-dimensional array.

In the end, I couldn't find a way to handle incoming data structured like that. Instead I had to revert to using single names like this:

<pre>
?firstname=foo&surname=bar&firstname=first&surname=last
</pre>

This is not something I like. What do you do if some of the fields are blank? Or if the order is jumbled, with the second @surname@ belonging to the first @firstname@.. It doesn't handle it..

The best I could do to take care of this and get a nicely formatted array of data was to parse it based on the keys I want and use @self.request.get_all@ in a nested loop.

h2. The Python Class

<pre>
#class to handle parsing of post/get data in to multi arrays
class ParamSort():
  def __init__(self, structure, request_obj):
    self.structure = structure
    self.request = request_obj
    self.results = []

  def sort(self):
    grouped = {}
    lengths = []
    results=[]
    #convert the post data to key based array
    for i, v in enumerate(self.structure):
      grouped[v]=[]
      lengths.insert(i,0)
      for f in self.request.get_all(v):
        grouped[v].append(f)
        lengths[i] += 1
    #convert the grouped to a multi dimensional
    for x in range(max(lengths)):
      tmp = {}
      for f in self.structure:
        if len(grouped[f]) > x :
          tmp[f] = grouped[f][x]
      #if everything mapped properly, save this sucker
      if len(tmp) == len(self.structure):
        results.append(tmp)
    return results


</pre>

Example use:

<pre>
dbkeys = ['firstname', 'lastname']
sorter = ParamSort(dbkeys, request)
res = sorter.sort()
</pre>

As I'm fairly new to Python, I might be totally wrong and missing something that everyone else knows... Please tell me if I am!

h3. The Files

All the files that are used... 

<div class='file_list clearfix'>
  <ul class="clearfix inline">
    <li class='category'><a href='/python-parameters/ParamSort.py' title='Python Class' class='category curvy'>Python file &raquo;</a></li>
  </ul>
</div>