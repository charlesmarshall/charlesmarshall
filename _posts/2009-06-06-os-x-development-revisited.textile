---
layout: post
title: OS X Web Development (Revisited)
category: web
---

Many revisions have passed since we last covered this topic, so with a fresh install on hand it's time to refactor!

h3. MySQL

For the early versions of Leopard you had to compile from source, not very pretty and can prove troublesome for people not used to that kind of thing. Well not any more! MySQL themselves have released "a package":http://dev.mysql.com/downloads/mysql/5.1.html#macosx-dmg for 5.1 which works nicely and has a "companion guide":http://dev.mysql.com/doc/refman/5.0/en/mac-os-x-installation.html to get you set up.

If you are on your local machine and getting fed up of having to type a password to connect, you can also blank the password by running this command:

@mysqladmin -p -u username password ''@

Where username is the user account you want to blank the password for.

You should take a look at "Sequel Pro":http://www.sequelpro.com/ for a nice native interface to connect and manipulate databases.

h3. PHP

Although there isn't an official release for OS X, there is however, a link hidden away on the side navigation for "all in one package":http://www.entropy.ch/software/macosx/php/ that will take you to "a guide":http://www.entropy.ch/software/macosx/php/ with a download link. This download is another package installer so you just click and follow instructions.

You may want to alter your php.ini file a little to have short tags enabled but otherwise it was spot on. The only issue with this package is making the command line version the same as the shared object used by apache. For an experienced user this is no problem, symlinks are your friends.

Make a backup of your current php bin file and then symlink this new one to that location, so now your path should follow the symlink to the correct version of php!

h3. Apache

As we haven't built anything from source this time we no longer need to tell apache what architecture it's using, so no need to make any amends. If you are making sites with the same structure all the time I would say put this into your vhosts file:

For ease you can use a vhost declaration like:

<pre>
<VirtualHost *:80>
    VirtualDocumentRoot /path/to/websites/%1/public
    <Directory "/path/to/websites/%1/public">
      Options FollowSymLinks
          AllowOverride None
    </Directory>
</VirtualHost>
</pre>

This way you no longer need to make a vhost per site. If only you could this with /etc/hosts file!

If you are getting 403 errors then make sure your directory declaration is correct and looks something like:

@&lt;Directory /&gt;
    Options FollowSymLinks
    AllowOverride All
&lt;/Directory&gt;@

h3. GiT

Version control is an import part of our jobs, so we use a distributed system called git, hopefully you've heard of it. There is "now a very nice and easy package file for OS X":http://code.google.com/p/git-osx-installer/ so again you can skip out all the command line stuff and just click to install it.

It comes with an extra script file, if you run this you can then take full advantage of software like "GitX":http://gitx.frim.nl/ and "OpenItInGit":http://code.google.com/p/git-osx-installer/wiki/OpenInGitGui (a Finder plugin) to do git with a gui!

If you use text mate as an editor you can also get hold of a "git bundle for text mate called gitorious":http://gitorious.org/git-tmbundle, which is installed via git.

h3. Ruby Gems

If you are using gems such as capistrano you will need to do an update as the ones in Leopard are somewhat out of date! It is very straight forward but does require using the command line:

@sudo gem update --system@

This will get your version of gems updated and sudo gem update will update any gems installed to the latest versions.

h3. ImageMagick

If you need ImageMagick for your php framework this section's for you. They now have a ImageMagick "binary install for OS X Leopard":http://www.imagemagick.org/download/binaries/ImageMagick-universal-apple-darwin9.7.0.tar.gz available. Download this and extract it to /usr/local. To allow your php scripts to execute ImageMagick you'll need to set some environment variables for the apache process. To do this edit the file /System/Library/LaunchDaemons/org.apache.httpd.plist to add something like the following (additions highlighted):

@&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;org.apache.httpd&lt;/string&gt;
    &lt;key&gt;OnDemand&lt;/key&gt;
    &lt;false/&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/usr/sbin/httpd&lt;/string&gt;
        &lt;string&gt;-D&lt;/string&gt;
        &lt;string&gt;FOREGROUND&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;SHAuthorizationRight&lt;/key&gt;
    &lt;string&gt;system.preferences&lt;/string&gt;
    &lt;key&gt;EnvironmentVariables&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;DYLD_LIBRARY_PATH&lt;/key&gt;
        &lt;string&gt;/usr/local/ImageMagick-6.5.3/lib&lt;/string&gt;
        &lt;key&gt;MAGICK_HOME&lt;/key&gt;
        &lt;string&gt;/usr/local/ImageMagick-6.5.3&lt;/string&gt;
        &lt;key&gt;PATH&lt;/key&gt;
        &lt;string&gt;/usr/local/ImageMagick-6.5.3/bin:/usr/bin:/bin:/usr/sbin:/sbin&lt;/string&gt;
    &lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;@

h3. The Big Bonus!

Using this method means that although you'll have to start off altering your system paths a bit, in the future whenever you do a OS X update your setup will not get wiped (with the exception of the php symlink). Much nicer than having to reinstall every time.

NOTE: I originally wrote this post for the "One Black Bear":http://oneblackbear.com website after formatting and experimenting with new setup on my laptop. It is very handy for reference so I included it on my site as well.

EDIT (Sept 30 2009): Even better! with Snow Leopard you no longer have to install a custom version of PHP; the built in version is up to date and comes with everything.