---
layout: default
title: jQuery Translator
category: jquery
---

Came across googles ever handy Ajax translator API and I thought I'd write a quick jQuery plugin for it.

h2. Summary

* The plugin should be run on a form (for dynamic switching) or the document for static content
* You can mix static content with dynamic, so you can translate page content or form values, by simply switching the selector
* Automatic language detection (by leaving origin_language empty)
* Supports all "languages available from google":http://code.google.com/apis/ajaxlanguage/documentation/#Details
* When passing in languages they should use the standard 2 character short code.
* After translation hooks

(#working-example)h3. Working Example

<form action='' method='get' id='translation_form' class='inlineform'>
  <fieldset class='half'>
  
    <label for='translate'>Translate:</label>
    <input type='text' name='translate' id='translate' value='' class='text_field'/>  
    
    <label for='from_lang'>From</label>
    <select id='from_lang' name='from_lang'>
      <option value='en' selected="selected">English</option>
      <option value='es'>Spanish</option>
      <option value='fr'>French</option>
    </select>
    
    
  </fieldset>
  
  <fieldset class='half'>
  
    <label for='to_lang'>To</label>
    <select id='to_lang' name='to_lang'>
      <option value='en'>English</option>
      <option value='es' selected="selected">Spanish</option>
      <option value='fr'>French</option>
    </select>
  
    <label for='result'>Result:</label>
    <input type='text' name='result' id='result' value='' class='text_field'/>
  
  </fieldset>
  
</form>


h3. Details

Using the plugin is straight forward enough. Once you have a form, like the one above, you need to load in the google language API, this plugin and on document ready call the translator plugin.

You should end up with something a bit like this:

<pre>
<script src='http://www.google.com/jsapi'  type='text/javascript'></script>	
<script type='text/javascript'>                      
  google.load("language", "1");
</script>
<script src="/javascripts/jquery.translator.js" type="text/javascript" charset="utf-8"></script>
<script type='text/javascript'>
jQuery(document).ready(function(){
  jQuery('#translation_form').translator({
    "origin": '#translate',
    "origin_language": '#from_lang',
    "result": '#result',
    "result_language": '#to_lang'
  });
});
</script>  
</pre>

The plugin should be called on the parent form as it captures the form submit event and runs the translate. It also runs the a translation call on the following events:

* Form submit
* Pressing space or enter within the origin field
* Changing either the source or result language (these should both be drop downs)

h3. Language Sniffing

As part of the google API you can leave the origin language blank and it will try and figure it for itself. It's very simple to do with this plugin, just don't make a selector for it!


<form action='' method='get' id='auto_translation_form' class='inlineform'>
  <fieldset class='half'>
  
    <label for='translate'>Translate:</label>
    <input type='text' name='translate' id='translate_from' value='' class='text_field'/>  
    
    
  </fieldset>
  
  <fieldset class='half'>
  
    <label for='dest_lang'>To</label>
    <select id='dest_lang' name='dest_lang'>
      <option value='en'>English</option>
      <option value='es'>Spanish</option>
      <option value='fr' selected="selected">French</option>
    </select>
  
    <label for='auto_result'>Result:</label>
    <input type='text' name='auto_result' id='auto_result' value='' class='text_field'/>
  
  </fieldset>
  
</form>

To do this, you just need to modify the call to translator to have an empty origin_langauge parameter:

<pre>
jQuery('#auto_translation_form').translator({
  "origin": '#translate_from',
  "origin_language": '',
  "result": '#auto_result',
  "result_language": '#dest_lang'
});
</pre>

The only issue that does sometimes come up is with using UTF-8 characters and how they are displayed in text areas and the like.

h3. Translating Page Content With a Fixed Language

If you want to translate a static segment or an entire page, this plugin can do that also. Again, all you need to do is modify the call to translator plugin. Here is an example:

<p id='my_english_version' class='example'>Hello, my name is Charles. How are you today?</p>
<p id='my_french_result' class='example'></p>

Here I change the selectors and manually pass in the language codes to translate between as such:

<pre>
jQuery(document).translator({
  "origin": '#my_english_version',
  "origin_language": 'en',
  "result": '#my_french_result',
  "result_language": 'fr'
});
</pre>

h3. Translating Page Content With a Selectable Language

You can also mix and match the two methods, having static content but swapping between languages like below:

<form action='' method='get' id='static_content_translation_form' class='inlineform'>
  <fieldset class='half'>
    <label for='trans_to'>Translate to</label>
    <select id='trans_to' name='trans_to'>
      <option value='en'>English</option>
      <option value='es' selected="selected">Spanish</option>
      <option value='fr'>French</option>
    </select>
  </fieldset>
</form>
<p id='static_english_version' class='example'>Translation is the name of the game!</p>
<p id='dynamic_result' class='example'></p>

This is achieved very easily by switching the result_language parameter to a selector while keeping the origin_language as 'en'

<pre>
jQuery('#static_content_translation_form').translator({
  "origin": '#static_english_version',
  "origin_language": 'en',
  "result": '#dynamic_result',
  "result_language": '#trans_to'
});  
</pre>

h3. Hooks

The plugin gives the ability to add a post hook on a successful translation. On this site for example I track (via google analytics page events) what is translated from each query.

In normal jQuery style you can pass in a function as a parameter to be run like this:

<pre>
jQuery('#static_content_translation_form').translator({
  "origin": '#static_english_version',
  "origin_language": 'en',
  "result": '#dynamic_result',
  "result_language": '#trans_to',
  "after_translate": function(original, translation){alert('translated!');}
});
</pre>

Both the original text and the translated text is passed in to the function.

h3. Download

"Grab the file here":/javascripts/jquery.translator.js



<script type='text/javascript'>                      
  google.load("language", "1");
</script>
<script src="/javascripts/jquery.translator.js" type="text/javascript" charset="utf-8"></script>
<script type='text/javascript'>
var track = function track_translate(original, result){
  _gaq.push(['_trackEvent', 'translator', original, result]);
};


jQuery(document).ready(function(){
  jQuery('#translation_form').translator({
    "origin": '#translate',
    "origin_language": '#from_lang',
    "result": '#result',
    "result_language": '#to_lang',
    "after_translate": track
  });
  jQuery('#auto_translation_form').translator({
    "origin": '#translate_from',
    "origin_language": '',
    "result": '#auto_result',
    "result_language": '#dest_lang',
    "after_translate": track
  });  
  jQuery(document).translator({
    "origin": '#my_english_version',
    "origin_language": 'en',
    "result": '#my_french_result',
    "result_language": 'fr',
    "after_translate": track
  });
  jQuery('#static_content_translation_form').translator({
    "origin": '#static_english_version',
    "origin_language": 'en',
    "result": '#dynamic_result',
    "result_language": '#trans_to',
    "after_translate": track
  });
});

</script>
